/**
 * Portainer API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8 You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example: ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available: * Public access * Authenticated access * Restricted access * Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://gist.github.com/deviantony/77026d402366b4b43fa5918d41bc42f8). 
 *
 * OpenAPI spec version: 1.19.2
 * Contact: info@portainer.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GenericError', 'model/Stack', 'model/StackCreateRequest', 'model/StackFileInspectResponse', 'model/StackListResponse', 'model/StackMigrateRequest', 'model/StackUpdateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GenericError'), require('../model/Stack'), require('../model/StackCreateRequest'), require('../model/StackFileInspectResponse'), require('../model/StackListResponse'), require('../model/StackMigrateRequest'), require('../model/StackUpdateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.PortainerApi) {
      root.PortainerApi = {};
    }
    root.PortainerApi.StacksApi = factory(root.PortainerApi.ApiClient, root.PortainerApi.GenericError, root.PortainerApi.Stack, root.PortainerApi.StackCreateRequest, root.PortainerApi.StackFileInspectResponse, root.PortainerApi.StackListResponse, root.PortainerApi.StackMigrateRequest, root.PortainerApi.StackUpdateRequest);
  }
}(this, function(ApiClient, GenericError, Stack, StackCreateRequest, StackFileInspectResponse, StackListResponse, StackMigrateRequest, StackUpdateRequest) {
  'use strict';

  /**
   * Stacks service.
   * @module api/StacksApi
   * @version 1.19.2
   */

  /**
   * Constructs a new StacksApi. 
   * @alias module:api/StacksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the stackCreate operation.
     * @callback module:api/StacksApi~stackCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a new stack
     * Deploy a new stack into a Docker environment specified via the endpoint identifier. **Access policy**: restricted 
     * @param {Number} type Stack deployment type. Possible values: 1 (Swarm stack) or 2 (Compose stack).
     * @param {String} method Stack deployment method. Possible values: file, string or repository.
     * @param {Number} endpointId Identifier of the endpoint that will be used to deploy the stack.
     * @param {Object} opts Optional parameters
     * @param {module:model/StackCreateRequest} opts.body Stack details. Required when method equals string or repository.
     * @param {String} opts.name Name of the stack. Required when method equals file.
     * @param {String} opts.endpointID Endpoint identifier used to deploy the stack. Required when method equals file.
     * @param {String} opts.swarmID Swarm cluster identifier. Required when method equals file and type equals 1.
     * @param {File} opts.file Stack file. Required when method equals file.
     * @param {String} opts.env Environment variables passed during deployment, represented as a JSON array [{&#39;name&#39;: &#39;name&#39;, &#39;value&#39;: &#39;value&#39;}]. Optional, used when method equals file and type equals 1.
     * @param {module:api/StacksApi~stackCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    this.stackCreate = function(type, method, endpointId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling stackCreate");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling stackCreate");
      }

      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling stackCreate");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type,
        'method': method,
        'endpointId': endpointId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Name': opts['name'],
        'EndpointID': opts['endpointID'],
        'SwarmID': opts['swarmID'],
        'file': opts['file'],
        'Env': opts['env']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Stack;

      return this.apiClient.callApi(
        '/stacks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackDelete operation.
     * @callback module:api/StacksApi~stackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a stack
     * Remove a stack. **Access policy**: restricted 
     * @param {Number} id Stack identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.external Set to true to delete an external stack. Only external Swarm stacks are supported.
     * @param {String} opts.endpointId Endpoint identifier used to remove an external stack (required when external is set to true)
     * @param {module:api/StacksApi~stackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stackDelete = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'external': opts['external'],
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/stacks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackFileInspect operation.
     * @callback module:api/StacksApi~stackFileInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StackFileInspectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the content of the Stack file for the specified stack
     * Get Stack file content. **Access policy**: restricted 
     * @param {Number} id Stack identifier
     * @param {module:api/StacksApi~stackFileInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StackFileInspectResponse}
     */
    this.stackFileInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackFileInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StackFileInspectResponse;

      return this.apiClient.callApi(
        '/stacks/{id}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackInspect operation.
     * @callback module:api/StacksApi~stackInspectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect a stack
     * Retrieve details about a stack. **Access policy**: restricted 
     * @param {Number} id Stack identifier
     * @param {module:api/StacksApi~stackInspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    this.stackInspect = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackInspect");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Stack;

      return this.apiClient.callApi(
        '/stacks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackList operation.
     * @callback module:api/StacksApi~stackListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StackListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List stacks
     * List all stacks based on the current user authorizations. Will return all stacks if using an administrator account otherwise it will only return the list of stacks the user have access to. **Access policy**: restricted 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {\&quot;SwarmID\&quot;: \&quot;jpofkc0i9uo9wtx1zesuk649w\&quot;} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID. 
     * @param {module:api/StacksApi~stackListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StackListResponse}
     */
    this.stackList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StackListResponse;

      return this.apiClient.callApi(
        '/stacks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackMigrate operation.
     * @callback module:api/StacksApi~stackMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate a stack to another endpoint
     * Migrate a stack from an endpoint to another endpoint. It will re-create the stack inside the target endpoint before removing the original stack. **Access policy**: restricted 
     * @param {Number} id Stack identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endpointId Stacks created before version 1.18.0 might not have an associated endpoint identifier. Use this optional parameter to set the endpoint identifier used by the stack.
     * @param {module:model/StackMigrateRequest} opts.body Stack migration details.
     * @param {module:api/StacksApi~stackMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    this.stackMigrate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackMigrate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Stack;

      return this.apiClient.callApi(
        '/stacks/{id}/migrate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stackUpdate operation.
     * @callback module:api/StacksApi~stackUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stack
     * Update a stack. **Access policy**: restricted 
     * @param {Number} id Stack identifier
     * @param {module:model/StackUpdateRequest} body Stack details
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endpointId Stacks created before version 1.18.0 might not have an associated endpoint identifier. Use this optional parameter to set the endpoint identifier used by the stack.
     * @param {module:api/StacksApi~stackUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    this.stackUpdate = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stackUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stackUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endpointId': opts['endpointId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Stack;

      return this.apiClient.callApi(
        '/stacks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
